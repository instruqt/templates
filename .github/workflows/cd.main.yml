name: CD
on:
  pull_request:
    branches:
      - main
# env:
# ENV: Production
# INSTRUQT_TOKEN: ${{ secrets.INSTRUQT_TOKEN }}
# TRACKS_WORKDIR: /
jobs:
  # scope:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Finds scope
  #       id: scope
  #       uses: jitterbit/get-changed-files@v1
  # Goal: Find tracks that have been changed and push changes
  # Get scope with modified files, filter to unique trackSlug
  # cd to $TRACK_WORKDIR/trackSlug for all unique edited tracks
  # run `instruqt track push`
  push-tracks:
    runs-on: ubuntu-latest
    steps:
      - name: Download CLI
        run: |
          curl https://github.com/instruqt/cli/releases/download/1909-0b7cb45/instruqt-darwin-1909-0b7cb45.zip --output ./cli.zip
          ls
      - name: Unzip CLI
        uses: montudor/action-zip@v1
        with:
          args: unzip -qq ./cli.zip -d ./cli
      - name: Install CLI
        run: |
          mv ./cli/instruqt /usr/bin
      - name: Checkout
        uses: actions/checkout@v2
      - name: Finds scope
        id: scope
        uses: jitterbit/get-changed-files@v1
      - name: Finding modified tracks
        run: |
          #!/bin/bash
          # create slugs array
          slugs=()
          # read output into an array
          read -r -a list <<< "${{ steps.scope.outputs.added_modified }}"
          # Loop over modified files
          for modified_file_path in "${list[@]}"; do
              # output to array
              # replaces '/' with whitespace
              slug=(${modified_file_path//// })
              slugs+=($slug)
          done

          # TODO: filter unique slugs as unique_slugs
          echo "UNIQUE_MODIFIED_TRACKS=$slugs" >> $GITHUB_ENV

      - name: Pushing updated and/or new tracks
        run: |
          echo "${{ env.UNIQUE_MODIFIED_TRACKS }}"
          read -r -a slugs <<< "${{ env.UNIQUE_MODIFIED_TRACKS }}"
          # Loop over modified files
          for slug in "${slugs[@]}"; do
              cd $slug
              instruqt track push
          done
  # Goal: Find tracks that have been deleted entirely
  # Get scope with deleted files.
  # Check whether the track folder still eixsts
  # If yes, it's not entirely deleted, dont do anything
  # If no, the whole track has been deleted, run `instruqt track delete orgSlug/trackSlug`
  # delete-tracks:
  #   needs: scope
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deleting removed tracks
  #       run: |
  #         echo "We ran the thing!"
