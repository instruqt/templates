name: CD
on:
  pull_request:
    branches:
      - main
env:
  ENV: dev
  INSTRUQT_TOKEN: ${{ secrets.INSTRUQT_TOKEN_DEV }}
  TRACKS_WORKDIR: /
jobs:
  # scope:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Finds scope
  #       id: scope
  #       uses: jitterbit/get-changed-files@v1
  # Goal: Find tracks that have been changed and push changes
  # Get scope with modified files, filter to unique trackSlug
  # cd to $TRACK_WORKDIR/trackSlug for all unique edited tracks
  # run `instruqt track push`
  push-tracks:
    runs-on: ubuntu-latest
    steps:
      - name: Install CLI
        run: |
          curl https://github.com/instruqt/cli/releases/download/1909-0b7cb45/instruqt-linux-1909-0b7cb45.zip -L -o cli.zip
          unzip cli.zip
          mv ./instruqt /usr/local/bin
          rm cli.zip
      - name: Checkout
        uses: actions/checkout@v2
      - name: Finds scope
        id: scope
        uses: jitterbit/get-changed-files@v1
      - name: Finding modified tracks
        run: |
          #!/bin/bash
          # create slugs array
          slugs=()
          # Read output into an array
          read -r -a list <<< "${{ steps.scope.outputs.added_modified }}"
          # Loop over modified files
          for modified_file_path in ${list[@]}; do
              if [[ $modified_file_path =~ ^\. ]]; then
                  echo "Skipping $modified_file_path, not a track."
              else
                  # Strips everything after first '/'
                  slug=(${modified_file_path//// })
                  # Check if slug is already in scope
                  if [[ $slugs =~ (^|[[:space:]])$slug($|[[:space:]]) ]]; then
                      echo "$slug already exists, skipping."
                  else
                      slugs+=($slug)
                  fi
              fi
          done
          echo "UNIQUE_MODIFIED_TRACKS=${slugs[@]}" >> $GITHUB_ENV
      - name: Pushing updated and/or new tracks
        run: |
          echo "${{ env.UNIQUE_MODIFIED_TRACKS }}"
          read -r -a slugs <<< "${{ env.UNIQUE_MODIFIED_TRACKS }}"
          # Loop over modified files
          for slug in "${slugs[@]}"; do
              cd $slug
              instruqt --env ${{ env.ENV }} track push --force
              cd ..
          done
  # Goal: Find tracks that have been deleted entirely
  # Get scope with deleted files.
  # Check whether the track folder still eixsts
  # If yes, it's not entirely deleted, dont do anything
  # If no, the whole track has been deleted, run `instruqt track delete orgSlug/trackSlug`
  # delete-tracks:
  #   needs: scope
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deleting removed tracks
  #       run: |
  #         echo "We ran the thing!"
